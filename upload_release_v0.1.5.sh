#!/bin/bash

# Script para build e upload da vers√£o 0.1.5 com corre√ß√µes do Windows
echo "üöÄ Preparando nova vers√£o 0.1.5 com corre√ß√µes do Windows..."
echo ""

# Verificar se estamos na branch main
CURRENT_BRANCH=$(git branch --show-current)
if [ "$CURRENT_BRANCH" != "main" ]; then
    echo "‚ö†Ô∏è N√£o est√° na branch main. Branch atual: $CURRENT_BRANCH"
    echo "Mudando para a branch main..."
    git checkout main
fi

# Atualizar depend√™ncias se necess√°rio
echo "üì¶ Verificando depend√™ncias..."
npm install

# Fazer build completo
echo ""
echo "üî® Fazendo build da vers√£o 0.1.5..."
npm run build

if [ $? -ne 0 ]; then
    echo "‚ùå Erro no build do Vite"
    exit 1
fi

# Build do Electron
echo ""
echo "‚ö° Fazendo build do Electron..."
npm run electron:build

if [ $? -ne 0 ]; then
    echo "‚ùå Erro no build do Electron"
    exit 1
fi

# Verificar se os arquivos foram gerados
echo ""
echo "üìÅ Verificando arquivos gerados..."

if [ -f "release/Routini-0.1.5-arm64.dmg" ]; then
    echo "‚úÖ DMG para macOS encontrado"
    DMG_SIZE=$(ls -lh release/Routini-0.1.5-arm64.dmg | awk '{print $5}')
    echo "   Tamanho: $DMG_SIZE"
else
    echo "‚ùå DMG para macOS n√£o encontrado"
fi

if [ -f "release/Routini-Setup-0.1.5.exe" ]; then
    echo "‚úÖ Instalador para Windows encontrado"
    EXE_SIZE=$(ls -lh release/Routini-Setup-0.1.5.exe | awk '{print $5}')
    echo "   Tamanho: $EXE_SIZE"
else
    echo "‚ùå Instalador para Windows n√£o encontrado"
fi

if [ -f "release/Routini-0.1.5-portable.exe" ]; then
    echo "‚úÖ Vers√£o port√°til para Windows encontrada"
    PORTABLE_SIZE=$(ls -lh release/Routini-0.1.5-portable.exe | awk '{print $5}')
    echo "   Tamanho: $PORTABLE_SIZE"
else
    echo "‚ùå Vers√£o port√°til para Windows n√£o encontrada"
fi

echo ""
echo "üìù Preparando commit e tag..."

# Adicionar mudan√ßas ao git
git add .

# Fazer commit
git commit -m "feat: vers√£o 0.1.5 com corre√ß√µes cr√≠ticas para Windows

- Sistema completo de debug autom√°tico para Windows
- Corre√ß√µes de DPI e scaling para telas de alta resolu√ß√£o
- Corre√ß√µes de layout e viewport espec√≠ficas do Windows
- Corre√ß√µes de renderiza√ß√£o do calend√°rio
- Interface de debug visual para diagn√≥stico
- Persist√™ncia de corre√ß√µes aplicadas
- HashRouter configurado para compatibilidade com file://
- Imports diretos removendo lazy loading problem√°tico

Fixes:
- Calend√°rio n√£o encontrado no Windows
- Problemas de carregamento da interface
- Erro de roteamento com BrowserRouter
- Problemas de DPI/scaling
- React Router n√£o detectado

Esta vers√£o resolve os problemas cr√≠ticos reportados no Windows."

# Criar tag
git tag -a v0.1.5 -m "Vers√£o 0.1.5 - Corre√ß√µes cr√≠ticas para Windows

Esta vers√£o inclui:
- Sistema de debug autom√°tico espec√≠fico para Windows
- Corre√ß√µes de compatibilidade com protocolo file://
- Resolu√ß√£o de problemas de DPI e scaling
- Interface de diagn√≥stico visual
- Corre√ß√µes de renderiza√ß√£o do calend√°rio
- Melhor estabilidade no Windows

Arquivos inclu√≠dos:
- Routini-Setup-0.1.5.exe (Instalador Windows)
- Routini-0.1.5-portable.exe (Vers√£o port√°til Windows)
- Routini-0.1.5-arm64.dmg (macOS)"

echo ""
echo "üîÑ Fazendo push para o GitHub..."

# Push do c√≥digo
git push origin main

# Push das tags
git push origin v0.1.5

echo ""
echo "‚úÖ Vers√£o 0.1.5 preparada com sucesso!"
echo ""
echo "üìã Pr√≥ximos passos:"
echo "1. Acesse: https://github.com/elissoncardoso1/routini/releases"
echo "2. Clique em 'Create a new release'"
echo "3. Selecione a tag: v0.1.5"
echo "4. T√≠tulo: 'Vers√£o 0.1.5 - Corre√ß√µes Cr√≠ticas para Windows'"
echo "5. Adicione os seguintes arquivos:"
echo "   - release/Routini-Setup-0.1.5.exe"
echo "   - release/Routini-0.1.5-portable.exe"
echo "   - release/Routini-0.1.5-arm64.dmg"
echo ""
echo "üìù Descri√ß√£o sugerida para o release:"
echo "---"
cat << 'EOF'
## ü™ü Corre√ß√µes Cr√≠ticas para Windows

Esta vers√£o resolve problemas cr√≠ticos reportados no Windows, incluindo:

### ‚úÖ Problemas Resolvidos
- **Calend√°rio n√£o encontrado** - Sistema agora detecta e corrige automaticamente
- **Problemas de carregamento da interface** - Implementado debug autom√°tico
- **Erro de roteamento** - Migrado para HashRouter (compat√≠vel com protocolo file://)
- **Problemas de DPI/scaling** - Corre√ß√µes autom√°ticas para telas de alta resolu√ß√£o
- **React Router n√£o detectado** - Diagn√≥stico e corre√ß√£o autom√°tica

### üîß Novos Recursos
- **Sistema de Debug Autom√°tico**: Detecta e corrige problemas automaticamente
- **Interface de Diagn√≥stico Visual**: Painel de debug no canto inferior direito
- **Corre√ß√µes Persistentes**: As corre√ß√µes s√£o salvas e reaplicadas automaticamente
- **Diagn√≥stico Avan√ßado**: Identifica problemas cr√≠ticos, avisos e sugere corre√ß√µes

### üì± Como Usar
1. Baixe e instale a vers√£o para seu sistema
2. No Windows, o painel de debug aparecer√° automaticamente se houver problemas
3. Use "Executar Testes" para diagnosticar problemas
4. Use "Aplicar Corre√ß√µes" para resolver automaticamente

### üì• Downloads
- **Windows**: `Routini-Setup-0.1.5.exe` (Instalador) ou `Routini-0.1.5-portable.exe` (Port√°til)
- **macOS**: `Routini-0.1.5-arm64.dmg`

### üîó Mais Informa√ß√µes
Consulte `WINDOWS_FIXES_GUIDE.md` no reposit√≥rio para detalhes t√©cnicos das corre√ß√µes aplicadas.
EOF
echo "---"
echo ""
echo "üéâ Pronto para criar o release no GitHub!"
